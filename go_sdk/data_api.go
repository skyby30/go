/*
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine
 *
 * OpenAPI spec version: 3.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nutanix

import (
	"encoding/json"
	"net/url"
	"reflect"
)

type DataApi struct {
	Configuration Configuration
}

func NewDataApi() *DataApi {
	configuration := NewConfiguration()
	return &DataApi{
		Configuration: *configuration,
	}
}

func NewDataApiWithBasePath(basePath string) *DataApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &DataApi{
		Configuration: *configuration,
	}
}

/**
 * Query changed regions metadata.
 * This API provides for querying the metadata about the regions that are different between two snapshots of a disk in the AOS file system. (The snapshot specified by the reference parameter will be used as the basis for computing the changed regions.) The main use of this API is to enable incremental and differential backups. Since each region specifies whether the region is all zeros, reads of such zeroed regions need not have to be performed while backing up the underlying disk. When no reference is specified, the response includes all the allocated regions in the given disk.
 *
 * @param body
 * @return *ChangedRegions
 */
func (a DataApi) DataChangedRegionsPost(body ChangedRegionsQuery) (*ChangedRegions, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/data/changed_regions"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (basicAuth) required

	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != "" {
		headerParams["Authorization"] = "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	switch reflect.TypeOf(body) {
	case reflect.TypeOf(""):
		postBody = body
	default:
		postBody = &body
	}

	var successPayload = new(ChangedRegions)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}
